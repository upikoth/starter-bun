openapi: 3.1.0
info:
  title: Starter API
  version: 1.0.0

servers:
  - url: http://localhost:8000/
    description: Dev server
  - url: https://starter.upikoth.dev/
    description: Production server

externalDocs:
  description: Документация по проекту starter
  url: https://upikoth.dev/projects/starter/intro.html

tags:
  - name: health
    description: Проверка работоспособности приложения
  - name: sessions
    description: Методы для работы с сессией
  - name: users
    description: Методы для работы с пользователями

paths:
  /api/v1/health:
    get:
      tags:
        - health
      description: Проверка работоспособности приложения
      responses:
        200:
          description: Приложение работает
          $ref: '#/components/responses/defaultSuccess'

  /api/v1/session:
    get:
      tags:
        - sessions
      description: Получение информации о текущей сессии пользователя
      responses:
        200:
          description: Информация о текущей сессии пользователя
          $ref: '#/components/responses/sessionsGetCurrentSessionSuccess'
        401:
          description: Пользователь не авторизован
          $ref: '#/components/responses/defaultNotAuthorized'

  /api/v1/sessions:
    get:
      tags:
        - sessions
      description: Получение информации обо всех сессиях в приложении

      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'

      responses:
        200:
          description: Список всех сессий
          $ref: '#/components/responses/sessionsGetAllSessionSuccessResponse'
        401:
          description: Пользователь не авторизован
          $ref: '#/components/responses/defaultNotAuthorized'
        403:
          description: Недостаточно прав
          $ref: '#/components/responses/defaultForbidden'

    post:
      tags:
        - sessions
      description: Создание сессии пользователя по логину и паролю
      requestBody:
        $ref: '#/components/requestBodies/sessionsCreateSessionBodyRequest'

      responses:
        200:
          description: Сессия успешно создана
          $ref: '#/components/responses/sessionsCreateSessionSuccessResponse'
        400:
          description: Переданы некорректные логин или пароль
          $ref: '#/components/responses/sessionsCreateSessionWrongData'

  /api/v1/sessions/{id}:
    delete:
      tags:
        - sessions
      description: Удаление сессии пользователя по id

      parameters:
        - $ref: '#/components/parameters/defaultId'

      responses:
        200:
          description: Сессия успешно удалена
          $ref: '#/components/responses/defaultSuccess'
        400:
          description: Ошибки при удалении сессии
          $ref: '#/components/responses/sessionDeleteSessionError'
        401:
          description: Пользователь не авторизован
          $ref: '#/components/responses/defaultNotAuthorized'
        403:
          description: Недостаточно прав
          $ref: '#/components/responses/defaultForbidden'

  /api/v1/users:
    get:
      tags:
        - users
      description: Получение информации обо всех пользователях

      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/userStatusParameter'

      responses:
        200:
          description: Список всех пользователей
          $ref: '#/components/responses/usersGetAllUsersSuccessResponse'
        401:
          description: Пользователь не авторизован
          $ref: '#/components/responses/defaultNotAuthorized'
        403:
          description: Недостаточно прав
          $ref: '#/components/responses/defaultForbidden'

    post:
      tags:
        - users
      description: Создание пользователя по логину и паролю.
        Создать нового пользователя без подтверждения почты может только пользователь с ролью SuperAdmin
      requestBody:
        $ref: '#/components/requestBodies/usersCreateUserBodyRequest'

      responses:
        200:
          description: Пользователь успешно создан
          $ref: '#/components/responses/usersCreateUserSuccessResponse'
        400:
          description: Переданы некорректные данные
          $ref: '#/components/responses/usersCreateUserWrongData'
        401:
          description: Пользователь не авторизован
          $ref: '#/components/responses/defaultNotAuthorized'
        403:
          description: Недостаточно прав
          $ref: '#/components/responses/defaultForbidden'

  /api/v1/users/{id}:
    get:
      tags:
        - users
      description: Получение информации о пользователе по id

      parameters:
        - $ref: '#/components/parameters/defaultId'

      responses:
        200:
          description: Информация о пользователе
          $ref: '#/components/responses/usersGetUserByIdSuccessResponse'
        400:
          description: Ошибки получении информации о пользователе
          $ref: '#/components/responses/sessionDeleteSessionError'
        401:
          description: Пользователь не авторизован
          $ref: '#/components/responses/defaultNotAuthorized'
        403:
          description: Недостаточно прав
          $ref: '#/components/responses/defaultForbidden'

    patch:
      tags:
        - users
      description: Обновление информации о пользователе. Блокировка пользователя

      parameters:
        - $ref: '#/components/parameters/defaultId'
      requestBody:
        $ref: '#/components/requestBodies/usersUpdateUserBodyRequest'

      responses:
        200:
          description: Информация о пользователе обновлена
          $ref: '#/components/responses/usersUpdateUserSuccessResponse'
        400:
          description: Переданы некорректные данные
          $ref: '#/components/responses/usersUpdateUserWrongData'
        401:
          description: Пользователь не авторизован
          $ref: '#/components/responses/defaultNotAuthorized'
        403:
          description: Недостаточно прав
          $ref: '#/components/responses/defaultForbidden'

components:
  schemas:
    user:
      type: object
      required:
        - id
        - email
        - status
        - role
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        status:
          type: string
          enum:
            - active
            - blocked
        role :
          type: string
          enum:
            - user
            - admin
            - super-admin

    defaultSuccessResponse:
      type: object
      required:
        - success
        - data
      properties: 
        success:
          type: boolean
          enum:
            - true
        data:
          type: object

    defaultNotAuthorizedResponse:
      type: object
      required:
        - success
        - data
        - error
      properties: 
        success:
          type: boolean
          enum:
            - false
        data:
          type: object
        error:
          type: object
          required:
            - code
            - description
          properties:
            code:
              type: integer
              enum:
                - 9
            description:
              type: string
              enum:
                - Пользователь не авторизован

    defaultForbiddenResponse:
      type: object
      required:
        - success
        - data
        - error
      properties: 
        success:
          type: boolean
          enum:
            - false
        data:
          type: object
        error:
          type: object
          required:
            - code
            - description
          properties:
            code:
              type: integer
              enum:
                - 10
            description:
              type: string
              enum:
                - Недостаточно прав

    defaultWrongDataResponse:
      type: object
      required:
        - success
        - data
        - error
      properties: 
        success:
          type: boolean
          enum:
            - false
        data:
          type: object
        error:
          type: object
          required:
            - code
            - description
          properties:
            code:
              type: integer
            description:
              type: string

    sessionsGetCurrentSessionSuccessResponse:
      type: object
      required:
        - success
        - data
      properties: 
        success:
          type: boolean
          enum:
            - true
        data:
          type: object
          required:
            - user
            - session
          properties:
            user:
              $ref: '#/components/schemas/user'
            session:
              type: object
              required:
                - id
              properties:
                id:
                  type: integer

    sessionsGetAllSessionSuccessResponse:
      type: object
      required:
        - success
        - data
      properties: 
        success:
          type: boolean
          enum:
            - true
        data:
          type: object
          required:
            - sessions
            - limit
            - offset
            - total
          properties:
            sessions:
              type: array
              items:
                type: object
                required:
                  - id
                  - userId
                properties:
                  id:
                    type: integer
                  userId:
                    type: integer
            limit:
              type: integer
            offset:
              type: integer
            total:
              type: integer

    sessionsCreateSessionBodyRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    sessionsCreateSessionSuccessResponse:
      type: object
      required:
        - success
        - data
      properties: 
        success:
          type: boolean
          enum:
            - true
        data:
          type: object
          required:
            - user
            - session
          properties:
            user:
              $ref: '#/components/schemas/user'
            session:
              type: object
              required:
                - id
              properties:
                id:
                  type: integer

    sessionsCreateSessionWrongDataResponse:
      type: object
      required:
        - success
        - data
        - error
      properties: 
        success:
          type: boolean
          enum:
            - false
        data:
          type: object
        error:
          type: object
          required:
            - code
            - description
          properties:
            code:
              type: integer
              enum:
                - 6
            description:
              type: string
              enum:
                - Email или пароль указаны неверно

    sessionDeleteSessionErrorResponse:
      type: object
      required:
        - success
        - data
        - error
      properties: 
        success:
          type: boolean
          enum:
            - false
        data:
          type: object
        error:
          type: object
          required:
            - code
            - description
          properties:
            code:
              type: integer
              enum:
                - 4
                - 3
            description:
              type: string
              enum:
                - Сессия не найдена
                - \"id\" must be a number

    usersGetAllUsersSuccessResponse:
      type: object
      required:
        - success
        - data
      properties: 
        success:
          type: boolean
          enum:
            - true
        data:
          type: object
          required:
            - users
            - limit
            - offset
            - total
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/user'
            limit:
              type: integer
            offset:
              type: integer
            total:
              type: integer

    usersGetUserByIdSuccessResponse:
      type: object
      required:
        - success
        - data
      properties: 
        success:
          type: boolean
          enum:
            - true
        data:
          type: object
          required:
            - user
          properties:
            user:
              type: object
              $ref: '#/components/schemas/user'

    usersCreateUserBodyRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    usersCreateUserSuccessResponse:
      type: object
      required:
        - success
        - data
      properties: 
        success:
          type: boolean
          enum:
            - true
        data:
          type: object
          required:
            - user
          properties:
            user:
              $ref: '#/components/schemas/user'

    usersUpdateUserBodyRequest:
      type: object
      properties: 
        email:
          type: string
          format: email
        status:
          type: string
          enum:
            - active
            - blocked

    usersUpdateUserSuccessResponse:
      type: object
      required:
        - success
        - data
      properties: 
        success:
          type: boolean
          enum:
            - true
        data:
          type: object
          required:
            - user
          properties:
            user:
              $ref: '#/components/schemas/user'

  parameters:
    defaultId:
      description: Id сущности
      in: path
      name: id
      required: true
      schema:
        type: integer
        minimum: 1

    limitParameter:
      description: Максимальное количество элементов в ответе
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 0
        default: 10

    offsetParameter:
      description: Отступ, начиная с которого нужно возвращать элементы
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0

    userStatusParameter:
      description: Фильтр по статусу пользователя
      in: query
      name: status
      required: false
      schema:
        type: string
        enum:
          - active
          - blocked

  requestBodies:
    sessionsCreateSessionBodyRequest:
      description: Логин и пароль для входа в приложение
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/sessionsCreateSessionBodyRequest'
          examples:
            emailAndPassword:
              summary: Логин и пароль
              externalValue: /api/docs/examples/sessions/create/request-email-password.json

    usersCreateUserBodyRequest:
      description: Логин и пароль для создания пользователя
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/usersCreateUserBodyRequest'
          examples:
            emailAndPassword:
              summary: Логин и пароль
              externalValue: /api/docs/examples/users/create/request-email-password.json

    usersUpdateUserBodyRequest:
      description: Информация для обновления пользователя
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/usersUpdateUserBodyRequest'
          examples:
            allFields:
              summary: Все возможные поля
              externalValue: /api/docs/examples/users/update/request-all-fields.json

  responses:
    defaultSuccess:
      description: Стандартный ответ при успешно выполненном запросе
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/defaultSuccessResponse'
          examples:
            defaultSuccess:
              summary: Успешный ответ без доп. информации
              externalValue: /api/docs/examples/default/200.json

    defaultNotAuthorized:
      description: Пользователь не авторизован
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/defaultNotAuthorizedResponse'
          examples:
            defaultNotAuthorized:
              summary: Ошибка авторизации
              externalValue: /api/docs/examples/default/401.json

    defaultForbidden:
      description: Недостаточно прав
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/defaultForbiddenResponse'
          examples:
            defaultForbidden:
              summary: Недостаточно прав
              externalValue: /api/docs/examples/default/403.json

    sessionsGetCurrentSessionSuccess:
      description: Успешное получение информации о сессии пользователя
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/sessionsGetCurrentSessionSuccessResponse'
          examples:
            activeUser:
              summary: Активный пользователь
              externalValue: /api/docs/examples/sessions/get-current-session/response-success.json

    sessionsGetAllSessionSuccessResponse:
      description: Успешное получение списка сессий
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/sessionsGetAllSessionSuccessResponse'
          examples:
            success:
              summary: Список сессий пользователей
              externalValue: /api/docs/examples/sessions/get-all/response-success.json

    sessionsCreateSessionSuccessResponse:
      description: Успешное создание сессии пользователя
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/sessionsCreateSessionSuccessResponse'
          examples:
            success:
              summary: Данные о пользователе
              externalValue: /api/docs/examples/sessions/create/response-success.json

    sessionsCreateSessionWrongData:
      description: Ошибка при создании сессии
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/sessionsCreateSessionWrongDataResponse'
          examples:
            wrongData:
              summary: Некорректные логин или пароль
              externalValue: /api/docs/examples/sessions/create/response-wrong-data.json
    
    sessionDeleteSessionError:
      description: Сессия с переданным id не найдена
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/sessionDeleteSessionErrorResponse'
          examples:
            notFound:
              summary: Сессия с переданным id не найдена
              externalValue: /api/docs/examples/sessions/delete/response-not-found.json
            wrongId:
              summary: Переданный id некорректен
              externalValue: /api/docs/examples/sessions/delete/response-wrong-id.json

    usersGetAllUsersSuccessResponse:
      description: Успешное получение списка пользователей
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/usersGetAllUsersSuccessResponse'
          examples:
            success:
              summary: Список пользователей
              externalValue: /api/docs/examples/users/get-all/response-success.json

    usersGetUserByIdSuccessResponse:
      description: Успешное получение информации о пользователе
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/usersGetUserByIdSuccessResponse'
          examples:
            successUserActive:
              summary: Информация об активном пользователе с ролью User
              externalValue: /api/docs/examples/users/get-by-id/response-success-user-active.json
            successAdminActive:
              summary: Информация об активном пользователе с ролью Admin
              externalValue: /api/docs/examples/users/get-by-id/response-success-admin-active.json
            successSuperAdminActive:
              summary: Информация об активном пользователе с ролью SuperAdmin
              externalValue: /api/docs/examples/users/get-by-id/response-success-super-admin-active.json
            successUserBlocked:
              summary: Информация о заблокированном пользователе с ролью User
              externalValue: /api/docs/examples/users/get-by-id/response-success-user-blocked.json
            successAdminBlocked:
              summary: Информация о заблокированном пользователе с ролью Admin
              externalValue: /api/docs/examples/users/get-by-id/response-success-admin-blocked.json
            successSuperAdminBlocked:
              summary: Информация о заблокированном пользователе с ролью SuperAdmin
              externalValue: /api/docs/examples/users/get-by-id/response-success-super-admin-blocked.json

    usersCreateUserWrongData:
      description: Ошибка при создании пользователя
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/defaultWrongDataResponse'
          examples:
            emailAlreadyExist:
              summary: Пользователь уже существует
              externalValue: /api/docs/examples/users/create/response-wrong-data-user-exist.json
            wrongEmail:
              summary: Некорректный email
              externalValue: /api/docs/examples/users/create/response-wrong-email.json
            wrongPassword:
              summary: Некорректный пароль
              externalValue: /api/docs/examples/users/create/response-wrong-password.json

    usersCreateUserSuccessResponse:
      description: Успешное создание пользователя
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/usersCreateUserSuccessResponse'
          examples:
            success:
              summary: Данные о созданном пользователе
              externalValue: /api/docs/examples/users/create/response-success.json

    usersUpdateUserSuccessResponse:
      description: Успешное обновление пользователя
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/usersUpdateUserSuccessResponse'
          examples:
            success:
              summary: Данные о созданном пользователе
              externalValue: /api/docs/examples/users/update/response-success.json

    usersUpdateUserWrongData:
      description: Ошибка при создании пользователя
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/defaultWrongDataResponse'
          examples:
            wrongEmail:
              summary: Некорректный email
              externalValue: /api/docs/examples/users/update/response-wrong-email.json

  securitySchemes:
    authorization:
      description:
        Для авторизации нужно вызвать POST метод /api/v1/sessions, передав корректные email и пароль, после чего
        токен установится в куки и будет передаваться во все методы при последующих вызовах

        Для удаления сессии нужно вызвать DELETE метод /api/v1/sessions, после чего куки удалятся

        Авторизация через поле ниже работать не будет из-за политик безопасности браузера
      name: Authorization
      type: apiKey
      in: cookie

security:
  - authorization: []
