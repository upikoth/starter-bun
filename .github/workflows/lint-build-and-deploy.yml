name: Lint, Build and Deploy

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CONTAINER_NAME: starter-bun

jobs:
  lint:
    runs-on: ubuntu-latest
    environment:
      name: prod
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.0.30

      - name: Cache npm dependencies
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Lint
        run: bun run lint

  test:
    runs-on: ubuntu-latest
    environment:
      name: prod
    env:
      APP_PORT: ${{ vars.APP_PORT }}
      APP_NAME: ''
      FRONT_URL: ''
      S3_REGION: ''
      S3_ENDPOINT: ''
      S3_BUCKET_NAME: ''
      EMAIL_FROM: ''
      EMAIL_PASSWORD: ''
      S3_ACCESS_KEY_ID: ''
      S3_SECRET_ACCESS_KEY: ''
      SENTRY_DNS: ''
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.0.30

      - name: Cache npm dependencies
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Test
        run: bun run test

  test-environment:
    runs-on: ubuntu-latest
    environment:
      name: prod
    env:
      APP_PORT: ${{ vars.APP_PORT }}
      APP_NAME: ${{ vars.APP_NAME }}
      FRONT_URL: ${{ vars.FRONT_URL }}
      S3_REGION: ${{ vars.S3_REGION }}
      S3_ENDPOINT: ${{ vars.S3_ENDPOINT }}
      S3_BUCKET_NAME: ${{ vars.S3_BUCKET_NAME }}
      EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      S3_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
      S3_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
      SENTRY_DNS: ${{ secrets.SENTRY_DNS }}
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.0.30

      - name: Cache npm dependencies
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Test environment variables
        run: bun run test:environment

  build-and-push-image:
    needs:
      - lint
      - test
      - test-environment
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    environment:
      name: prod

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs:
      - build-and-push-image
    runs-on: ubuntu-latest
    environment:
      name: prod
    env:
      APP_PORT: ${{ vars.APP_PORT }}
      APP_NAME: ${{ vars.APP_NAME }}
      FRONT_URL: ${{ vars.FRONT_URL }}
      S3_REGION: ${{ vars.S3_REGION }}
      S3_ENDPOINT: ${{ vars.S3_ENDPOINT }}
      S3_BUCKET_NAME: ${{ vars.S3_BUCKET_NAME }}
      EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      S3_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
      S3_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
      SENTRY_DNS: ${{ secrets.SENTRY_DNS }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup docker context
        run: |
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 0400 ~/.ssh/id_rsa
          ssh-keyscan -t rsa  ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          docker context create remote --docker "host=ssh://${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_PORT }}"
          docker context use remote

      - name: Deploy
        run: |
          docker compose stop backend
          docker compose pull backend
          docker compose -p "starter" up --no-deps -d backend
          docker system prune -f
